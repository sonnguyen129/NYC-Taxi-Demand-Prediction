# name: inference-pipeline

# on:
#   # workflow_run:
#   #   workflows: ["feature-pipeline"]
#   #   types:
#   #     - completed
#   schedule:
#     - cron: '30 * * * *'

#   workflow_dispatch:

# env:
#   PYTHON_VERSION: 3.9
#   POETRY_VERSION: 1.6.1
#   POETRY_URL: https://install.python-poetry.org

# jobs:

#   inference_pipeline:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     # Poetry cache depends on OS, Python version and Poetry version.
#     - name: Cache Poetry cache
#       uses: actions/cache@v3

#       with:
#         path: ~/.cache/pypoetry
#         key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}
    
#     # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
#     - name: Cache Packages
#       uses: actions/cache@v3
#       with:
#         path: ~/.local
#         key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
    
#     - name: Set up Python ${{ env.PYTHON_VERSION }}
#       uses: actions/setup-python@v3
#       with:
#         python-version: ${{ env.PYTHON_VERSION }}
    
#     - name: Install Poetry
#       run: |
#         curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#         echo "$HOME/.local/bin" >> $GITHUB_PATH
    
#     - name: Install Dependencies
#       run: poetry install
        
#     - name: Generating new batch of predictions
#       env: 
#         HOPSWORKS_PROJECT_NAME: ${{ secrets.HOPSWORKS_PROJECT_NAME }}
#         HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
#         COMET_ML_API_KEY: ${{ secrets.COMET_ML_API_KEY }}
#         COMET_ML_WORKSPACE: ${{ secrets.COMET_ML_WORKSPACE }}
#         COMET_ML_PROJECT_NAME: ${{ secrets.COMET_ML_PROJECT_NAME }}
#       run: make inference
  

# name: feature-pipeline

# on:
#   schedule:
#   - cron: '0 * * * *'

#   workflow_dispatch:

# env:
#   PYTHON_VERSION: 3.8
#   POETRY_VERSION: 1.6.1
#   POETRY_URL: https://install.python-poetry.org

# jobs:

#   feature_pipeline:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     # Poetry cache depends on OS, Python version and Poetry version.
#     - name: Cache Poetry cache
#       uses: actions/cache@v3

#       with:
#         path: ~/.cache/pypoetry
#         key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}
    
#     # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
#     - name: Cache Packages
#       uses: actions/cache@v3
#       with:
#         path: ~/.local
#         key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
    
#     - name: Set up Python ${{ env.PYTHON_VERSION }}
#       uses: actions/setup-python@v3
#       with:
#         python-version: ${{ env.PYTHON_VERSION }}
    
#     - name: Install Poetry
#       run: |
#         curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#         echo "$HOME/.local/bin" >> $GITHUB_PATH
    
#     - name: Install Dependencies
#       run: poetry install
        
#     - name: Run feature generation script
#       env: 
#         HOPSWORKS_PROJECT_NAME: ${{ secrets.HOPSWORKS_PROJECT_NAME }}
#         HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
#       run: make features
  
name: inference-pipeline

on:
  # workflow_dispatch:
  schedule:
   - cron: '*/5 * * * *'

jobs:
  test_schedule:

      runs-on: ubuntu-latest

      steps:
      - name: Repo Checkout
        uses: actions/checkout@v3

      - name: Python Setup & Packages Installation
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pip'
      - run: pip install -r requirements.txt

      # - name: Install Poetry
      #   uses: snok/install-poetry@v1

      # - name: Install Dependencies
      #   run: 
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
          

      - name: execute python workflows from bash script
        env: 
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: jupyter nbconvert --execute --to notebook notebooks/14_inference_pipeline.ipynb
        shell: bash


      #   - id: repo 
      #   name: Repo Checkout
      #   uses: actions/checkout@v2

      # - id: python
      #   name: Python Setup & Packages Installation
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.9'
      #     cache: 'pip'
      # - run: pip install -r requirements.txt

      # - id: jupyter 
      #   name: Jupyter Notebook Execution
      #   run: jupyter execute download.ipynb
      #   shell: bash